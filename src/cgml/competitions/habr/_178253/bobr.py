'''
Б. Бобр
Ограничения по времени: 1 секунда на тест
Ограничения по памяти: 64 Мб
Бобр собирается построить каскад плотин и уютную хатку в русле неширокой реки.
Так получилось, что река протекает по идеально прямой траектории, и ширина реки настолько мала,
что в рамках данной задачи мы можем ею пренебречь. На берегах реки стоят деревья,
которые бобр может использовать для строительства. Ученые решили выяснить,
насколько оптимально бобр выбирает места для строительства плотин и хатки с точки зрения минимального
суммарного расстояния, на которое необходимо переносить деревья.
Напишите программу, которая по заданным координатам деревьев относительно начала прямого участка реки,
 если считать ось сонаправленной течению определяет координаты объектов, соответствующие минимальному
 суммарному расстоянию, на которое необходимо переносить деревья.
Формат входных данных:
В первой строке входных данных содержится единственное целое положительное число 1<=T<=10 – количество тестовых блоков,
 идущих друг за другом. В первой строке каждого тестового блока содержится два целых положительных
 числа 1<=N<=1000, 0<=М<=10, 0<=L<=100 – соответственно количество деревьев, растущих на берегах реки,
 количество деревьев, необходимое для возведения одного объекта и количество объектов, которые необходимо возвести.
  В каждой из следующих N строчек записано единственное положительное вещественное число – расстояние в метрах
  от начала прямого участка реки (самого высокого по течению) до места, где растет соответствующее дерево.
  Известно, что деревьев гарантированно хватает, чтобы построить все объекты (N>=M*L)
Формат выходных данных:
Для каждого тестового блока в отдельной строке необходимо вывести единственное число — сумму координат мест,
в которых необходимо возвести объекты, чтобы суммарное расстояние, на которое потребуется перенести деревья
для строительства, было минимальным, указав три точных знака после десятичного разделителя.
Пример входных и выходных данных:
Входные данные
2
5 3 1
0.1
1.2
5.6
7.3
9.4
2 2 1
1
2
Выходные данные
7.300
1.000

'''
def min_runmean(n,w):
    rdist = float('inf')
    rpoint = -1
    for idx in range(len(n)-w+1):
        print(idx,n[idx],n[idx+w-1])
        print([v-n[idx] for v in n[idx:idx+w]])
        if rdist > n[idx+w-1]-n[idx]: rpoint, rdist = sum([v-n[idx] for v in n[idx:idx+w]]) / w+n[idx], n[idx+w-1]-n[idx]
    return rpoint

print(min_runmean([0.1,1.2,5.6,7.3,9.4],3))