class Solution(object):
    def subboards(self, board):
        N = len(board)
        for idx in range(N):
            yield [board[idx][idy] for idy in range(N) if board[idx][idy] != '.']
            yield [board[idy][idx] for idy in range(N) if board[idy][idx] != '.']
            yield [board[idx * 3 % N + idy // 3][idx // 3 * 3 + idy % 3] for idy in range(N) if
                   board[idx * 3 % N + idy // 3][idx // 3 * 3 + idy % 3] != '.']

    def isValidSudoku(self, board):
        for b in self.subboards(board):
            if len(b) != len(set(b)): return False
        return True

i1 = [
      ["5","3",".",".","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]

i2 = [
      ["8","3",".",".","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]

i3 = [[".","9",".",".","4",".",".",".","."],
      ["1",".",".",".",".",".","6",".","."],
      [".",".","3",".",".",".",".",".","."],
      [".",".",".",".",".",".",".",".","."],
      [".",".",".","7",".",".",".",".","."],
      ["3",".",".",".","5",".",".",".","."],
      [".",".","7",".",".","4",".",".","."],
      [".",".",".",".",".",".",".",".","."],
      [".",".",".",".","7",".",".",".","."]]

i4 = [["5","3",".",".","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]]

i5 = [[".",".",".",".","5",".",".","1","."],
      [".","4",".","3",".",".",".",".","."],
      [".",".",".",".",".","3",".",".","1"],
      ["8",".",".",".",".",".",".","2","."],
      [".",".","2",".","7",".",".",".","."],
      [".","1","5",".",".",".",".",".","."],
      [".",".",".",".",".","2",".",".","."],
      [".","2",".","9",".",".",".",".","."],
      [".",".","4",".",".",".",".",".","."]]

assert not Solution().isValidSudoku(i5)